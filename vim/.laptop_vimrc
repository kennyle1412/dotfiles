" Kenny's .vimrc
" Plug {{{
"
" Specify a directory for plugins
" " - For Neovim: ~/.local/share/nvim/plugged
" " - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes
Plug 'Raimondi/delimitMate'
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'easymotion/vim-easymotion'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-commentary'
Plug 'ervandew/supertab'
Plug 'tpope/vim-fugitive'
Plug 'godlygeek/tabular'
Plug 'jlanzarotta/bufexplorer'
Plug 'airblade/vim-gitgutter'
Plug 'mileszs/ack.vim'

Plug 'itchyny/lightline.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'tpope/vim-sleuth'


Plug 'wincent/terminus'
Plug 'yegappan/mru'
Plug 'sheerun/vim-polyglot'
Plug 'Yggdroot/indentLine'
Plug 'terryma/vim-multiple-cursors'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'

Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'drewtempelmeyer/palenight.vim'
Plug 'ayu-theme/ayu-vim' " or other package manager
Plug 'liuchengxu/space-vim-dark'
Plug 'colepeters/spacemacs-theme.vim'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'

if has('nvim')
    Plug 'autozimu/LanguageClient-neovim', {
        \ 'branch': 'next',
        \ 'do': 'bash install.sh',
        \ }
endif

" All of your Plugins must be added before the following line
call plug#end()            " required
" }}}
" ColorScheme {{{

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
if (empty($TMUX))
  if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  if (has("termguicolors"))
    set termguicolors
  endif
endif

" let g:airline_theme='onedark'
set background=dark
let g:lightline = {
      \ 'colorscheme': 'Dracula',
      \ }
let g:airline#extensions#tabline#enabled = 1
" let ayucolor="light"  " for light version of theme
" let ayucolor="mirage" " for mirage version of theme
" let ayucolor="dark"   " for dark version of theme
" colorscheme spacemacs-theme
colorscheme dracula
syntax on

" }}}
" Basics {{{
let g:TerminusFocusReporting=0
let g:gitgutter_terminal_reports_focus=0

set nocompatible              " be iMproved, required
set visualbell 

filetype off                  " required
filetype indent on
filetype plugin on
filetype plugin indent on

set autoread

set noswapfile
set lazyredraw

set foldenable
set encoding=utf-8

set laststatus=2
" set autoread                    " Automatically reread changed files without asking me anything
set number
set mouse=a
set hidden
set nobackup
set noshowmode
set title
set smartcase
set showcmd
set ttyfast

set ignorecase
set backspace=indent,eol,start

" show existing tab with 4 spaces width
set smarttab
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4

set copyindent
set autoindent
set smartindent
set preserveindent

set list listchars=tab:»\ ,trail:·

let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

let mapleader=','

set colorcolumn=80
set history=100
set nowrap

set hlsearch
set incsearch

set showmatch
set splitright
set splitbelow

set ruler
set list
set listchars=nbsp:¬,tab:»·,trail:·

set wildmenu
set wildmode=longest:full,full
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

source $HOME/.vim/autoload/cscope.vim

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
" }}}
" Keybindings / Keymappings {{{
nmap <C-\> :NERDTreeToggle<CR>
nnoremap <leader>rc :e $HOME/.vimrc<CR>

map <leader>o :MRU<CR>
nmap <Leader>ha <Plug>GitGutterStageHunk
nmap <Leader>hr <Plug>GitGutterUndoHunk
nmap <Leader>hp <Plug>GitGutterPreviewHunk

nnoremap <Leader><SPACE> :noh<CR>

nnoremap <Leader>s  : cs find s
nnoremap <Leader>g  : cs find g
nnoremap <leader>gc : Commit<CR>
nnoremap <Leader>t  : cs find t
nnoremap <Leader>l  : BufExplorer<CR>
nnoremap <leader>tt : TagbarToggle<CR>
nnoremap <leader>to : TagbarOpenAutoClose<CR>
nnoremap <leader>tp : TagbarTogglePause<CR>
nnoremap <leader>tc : TagbarClose<CR>

" nnoremap <leader>tf : TagbarOpen [fj]<CR>
nnoremap <leader>bd : bd<CR>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap ; :
vnoremap ; :

nmap <C-a> ^
nmap <C-e> $

nnoremap <silent> <Leader>f  : Files<CR>
nnoremap <silent> <Leader>cc : Commits<CR>
nnoremap <silent> <Leader>cb : BCommits<CR>
nnoremap <silent> <Leader>cl : lcd %:p:h<CR>
nnoremap <silent> <Leader>cd : cd %:p:h<CR>
nnoremap <silent> <Leader>e  : Lines<CR>
nnoremap <silent> <Leader>be : BLines<CR>
nnoremap <silent> <Leader>q  : q<CR>

nnoremap q; q:
" nnoremap <silent> <Leader>h  q:

nnoremap <silent> <Leader>gse : GFiles?<CR>
nnoremap <silent> <Leader>gss : Gstatus<CR>
nnoremap <silent> <Leader>gd  : Gdiff<CR>

" Insert mode completion
imap <c-a><c-f> <plug>(fzf-complete-path)
imap <c-a><c-j> <plug>(fzf-complete-file-ag)
imap <c-a><c-l> <plug>(fzf-complete-line)

" autocmd FileType c,h,cpp,java,php autocmd BufWritePre <buffer> %s/\s\+$//e

nmap <Leader>; : sp<CR>
nmap <Leader>' : vs<CR>

inoremap jk <ESC>
nnoremap <CR> i<CR><ESC>

" Remap for destroying trailing whitespace cleanly
nnoremap <Leader>w :w<CR>
" }}}
" Startup {{{
" }}}
" Easy Motion Movements {{{

let g:EasyMotion_smartcase = 1
let g:EasyMotion_do_mapping = 0 " Disable default mappings

map <Leader> <Plug>(easymotion-prefix)

nmap s <Plug>(easymotion-s)

map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
" map <Leader>w <Plug>(easymotion-w)
" map <Leader>e <Plug>(easymotion-e)

" }}}
" Fzf settings {{{

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" }}}
" vim:foldmethod=marker:foldlevel=0
